"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[7104],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},44316:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:1},o="Commit using a blueprint",l={unversionedId:"how-to/commit-blueprint",id:"how-to/commit-blueprint",title:"Commit using a blueprint",description:"This guide provides a walkthrough on using cardano-cli to assemble the necessary components for committing funds to a head using a blueprint transaction.",source:"@site/docs/how-to/commit-blueprint.md",sourceDirName:"how-to",slug:"/how-to/commit-blueprint",permalink:"/head-protocol/docs/how-to/commit-blueprint",draft:!1,editUrl:"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/how-to/commit-blueprint.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"userDocumentation",previous:{title:"Configuration",permalink:"/head-protocol/docs/configuration"},next:{title:"Submit a transaction",permalink:"/head-protocol/docs/how-to/submit-transaction"}},s={},p=[{value:"Step 1",id:"step-1",level:2},{value:"Step 2",id:"step-2",level:2},{value:"Step 3",id:"step-3",level:2},{value:"Step 4",id:"step-4",level:2},{value:"Step 5",id:"step-5",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"commit-using-a-blueprint"},"Commit using a blueprint"),(0,r.kt)("p",null,"This guide provides a walkthrough on using ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli")," to assemble the necessary components for committing funds to a ",(0,r.kt)("inlineCode",{parentName:"p"},"head")," using a blueprint transaction."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Prerequisites")),(0,r.kt)("p",null,"You should have access to the following repositories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hydra-node")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hydra-tui")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cardano-cli"),", and"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"curl")," binaries.")),(0,r.kt)("h2",{id:"step-1"},"Step 1"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli")," to create a ",(0,r.kt)("em",{parentName:"p"},"blueprint")," transaction from some ",(0,r.kt)("inlineCode",{parentName:"p"},"UTXO")," you own. First, initiate a Cardano node on the pre-production network:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./testnets/cardano-node.sh ~/code/hydra/testnets/preprod\n")),(0,r.kt)("h2",{id:"step-2"},"Step 2"),(0,r.kt)("p",null,"Determine which ",(0,r.kt)("inlineCode",{parentName:"p"},"UTXO")," you intend to commit to the ",(0,r.kt)("inlineCode",{parentName:"p"},"head"),". This example uses Alice's external wallet key to identify her address:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli address build \\\n --payment-verification-key-file hydra-cluster/config/credentials/alice-funds.vk \\\n --testnet-magic 1\n\naddr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z\n")),(0,r.kt)("p",null,"Next, query to see what ",(0,r.kt)("inlineCode",{parentName:"p"},"UTXO")," Alice has:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cardano-cli query utxo \\\n   --socket-path testnets/preprod/node.socket \\\n   --address addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z \\\n   --testnet-magic 1 \\\n   --output-json\n\n{\n    "14ab373afb1112d925b0f6a84518ac26d4a8cfcc99231e1f47e6996182e843a9#0": {\n        "address": "addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z",\n        "datum": null,\n        "datumhash": null,\n        "inlineDatum": null,\n        "referenceScript": null,\n        "value": {\n            "lovelace": 8000000\n        }\n    },\n    "14ab373afb1112d925b0f6a84518ac26d4a8cfcc99231e1f47e6996182e843a9#1": {\n        "address": "addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z",\n        "datum": null,\n        "datumhash": null,\n        "inlineDatum": null,\n        "referenceScript": null,\n        "value": {\n            "lovelace": 1828427\n        }\n    },\n}\n')),(0,r.kt)("h2",{id:"step-3"},"Step 3"),(0,r.kt)("p",null,"Select the first ",(0,r.kt)("inlineCode",{parentName:"p"},"UTXO"),", which has eight ada available. Use five ada to commit and rely on ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-node")," to balance the commit transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli transaction build-raw \\\n  --babbage-era \\\n  --tx-in 14ab373afb1112d925b0f6a84518ac26d4a8cfcc99231e1f47e6996182e843a9#0 \\\n  --tx-out addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z+5000000 \\\n  --fee 0 \\\n  --out-file tx.json\n")),(0,r.kt)("h2",{id:"step-4"},"Step 4"),(0,r.kt)("p",null,"You should now have the ",(0,r.kt)("em",{parentName:"p"},"blueprint")," transaction in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tx.json")," file. For ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-node")," to provide a draft commit transaction, you need to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Obtain the protocol parameters needed to run the ",(0,r.kt)("inlineCode",{parentName:"li"},"hydra-node")),(0,r.kt)("li",{parentName:"ul"},"Ensure the ",(0,r.kt)("inlineCode",{parentName:"li"},"hydra-node")," is up and running"),(0,r.kt)("li",{parentName:"ul"},"Have the ",(0,r.kt)("inlineCode",{parentName:"li"},"head")," in the initializing state"),(0,r.kt)("li",{parentName:"ul"},"Submit the HTTP request to the ",(0,r.kt)("inlineCode",{parentName:"li"},"hydra-node")," API server using the ",(0,r.kt)("em",{parentName:"li"},"blueprint")," transaction you just created and the ",(0,r.kt)("inlineCode",{parentName:"li"},"UTXO")," used for its input.")),(0,r.kt)("p",null,"Query the protocol parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli query protocol-parameters \\\n  --testnet-magic 1 \\\n  --socket-path testnets/preprod/node.socket \\\n  --out-file pp-preprod.json\n\n")),(0,r.kt)("h2",{id:"step-5"},"Step 5"),(0,r.kt)("p",null,"Start the ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-node")," as a ",(0,r.kt)("em",{parentName:"p"},"single")," party head instance."),(0,r.kt)("p",null,"Note: The value ",(0,r.kt)("inlineCode",{parentName:"p"},"6264cee4d5eab3fb58ab67f3899ecbcc0d7e72732a2d9c1c5d638115db6ca711")," comes from the ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-node")," release ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-scaling/hydra/releases/tag/0.16.0"},"0.16.0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"hydra-node \\\n  --node-id 1 --port 5001 --api-port 4001 \\\n  --hydra-signing-key demo/alice.sk \\\n  --hydra-scripts-tx-id 6264cee4d5eab3fb58ab67f3899ecbcc0d7e72732a2d9c1c5d638115db6ca711 \\\n  --cardano-signing-key hydra-cluster/config/credentials/alice.sk \\\n  --ledger-protocol-parameters pp-preprod.json \\\n  --testnet-magic 1 \\\n  --node-socket testnets/preprod/node.socket \\\n  --persistence-dir .\n")),(0,r.kt)("p",null,"Now you can start ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui")," and initialize the ",(0,r.kt)("inlineCode",{parentName:"p"},"head"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"hydra-tui \\\n  --connect 0.0.0.0:4001 \\\n  --cardano-signing-key hydra-cluster/config/credentials/alice-funds.sk \\\n  --testnet-magic 1 \\\n  --node-socket testnets/preprod/node.socket\n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," to initialize the ",(0,r.kt)("inlineCode",{parentName:"p"},"head"),". Once the head is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Initializing")," state, you can send the HTTP request to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/commit")," API path. Assemble the request body using the ",(0,r.kt)("inlineCode",{parentName:"p"},"cborHex")," field from the tx-body file ",(0,r.kt)("inlineCode",{parentName:"p"},"tx.json")," and the JSON representation of the ",(0,r.kt)("inlineCode",{parentName:"p"},"UTXO")," you used as input."),(0,r.kt)("p",null,"This is the valid JSON request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'{\n  "blueprintTx": {\n    "cborHex": "84a3008182582014ab373afb1112d925b0f6a84518ac26d4a8cfcc99231e1f47e6996182e843a900018182581d6069830961c6af9095b0f2648dff31fa9545d8f0b6623db865eb78fde81a007a12000200a0f5f6",\n    "description": "",\n    "type": "Tx BabbageEra"\n  },\n  "utxo": {\n    "14ab373afb1112d925b0f6a84518ac26d4a8cfcc99231e1f47e6996182e843a9#0": {\n      "address": "addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z",\n      "datum": null,\n      "datumhash": null,\n      "inlineDatum": null,\n      "referenceScript": null,\n      "value": {\n        "lovelace": 8000000\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Save this JSON to a ",(0,r.kt)("inlineCode",{parentName:"p"},"commit-request.json")," file."),(0,r.kt)("p",null,"You can now prompt the running ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-node")," to draft a commit transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl -X POST 127.0.0.1:4001/commit \\\n  --data @commit-request.json\n\n")),(0,r.kt)("p",null,"This yields a large CBOR blob, which you can save to the ",(0,r.kt)("inlineCode",{parentName:"p"},"commit-tx.json")," file."),(0,r.kt)("p",null,"Next, sign and submit the draft of the commit transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"\ncardano-cli transaction sign \\\n  --tx-file commit-tx.json \\\n  --signing-key-file hydra-cluster/config/credentials/alice-funds.sk \\\n  --out-file signed-tx.json\n\n\ncardano-cli transaction submit \\\n  --tx-file signed-tx.json \\\n  --socket-path testnets/preprod/node.socket \\\n  --testnet-magic 1\n")),(0,r.kt)("p",null,"If you start the ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui")," and wait until the transaction you just sent is re-observed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-node"),", you should see that the head is now open."))}u.isMDXComponent=!0}}]);