"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[6816],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=a.createContext({}),c=function(e){var t=a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(r),u=n,y=p["".concat(d,".").concat(u)]||p[u]||h[u]||o;return r?a.createElement(y,i(i({ref:t},l),{},{components:r})):a.createElement(y,i({ref:t},l))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},29441:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=r(87462),n=(r(67294),r(3905));const o={sidebar_label:"Basic Hydra head",sidebar_position:2},i="Basic Hydra head",s={unversionedId:"basic/index",id:"basic/index",title:"Basic Hydra head",description:"This document is a work in progress.",source:"@site/topologies/basic/index.md",sourceDirName:"basic",slug:"/basic/",permalink:"/head-protocol/topologies/basic/",draft:!1,editUrl:"https://github.com/cardano-scaling/hydra/tree/master/docs/topologies/basic/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Basic Hydra head",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Topologies",permalink:"/head-protocol/topologies/"},next:{title:"Managed Hydra head",permalink:"/head-protocol/topologies/managed/"}},d={},c=[],l={toc:c},p="wrapper";function h(e){let{components:t,...o}=e;return(0,n.kt)(p,(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"basic-hydra-head"},"Basic Hydra head"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"\ud83d\udee0\ufe0f This document is a work in progress.")),(0,n.kt)("p",null,"This document outlines the deployment architecture of a basic Hydra head. It serves as a foundational reference for other topologies discussed in this chapter and is illustrated below:"),(0,n.kt)("p",{align:"center"},(0,n.kt)("img",{src:r(62914).Z,alt:"Basic Hydra Head",height:400})),(0,n.kt)("p",null,"The basic setup of a Hydra head involves several ",(0,n.kt)("inlineCode",{parentName:"p"},"hydra-node"),"s, each connected to the Cardano network via a ",(0,n.kt)("inlineCode",{parentName:"p"},"cardano-node")," (not depicted in the diagram). A Hydra client, such as ",(0,n.kt)("inlineCode",{parentName:"p"},"hydra-tui"),", typically connects locally to a ",(0,n.kt)("inlineCode",{parentName:"p"},"hydra-node")," to initiate a Hydra head using an off-chain network. The diagram displays two Hydra heads (colored blue and green) established between two distinct sets of ",(0,n.kt)("inlineCode",{parentName:"p"},"hydra-node"),"s. The lines in the diagram represent Hydra network connections, and the circles symbolize the Hydra head state and credentials, collectively referred to as a ",(0,n.kt)("em",{parentName:"p"},"Hydra head party"),"."),(0,n.kt)("p",null,"The diagram does not show multiple, logical Hydra heads operating concurrently within the same ",(0,n.kt)("inlineCode",{parentName:"p"},"hydra-node"),". This capability, likely to be supported in the future, would facilitate the reuse of network connections between ",(0,n.kt)("inlineCode",{parentName:"p"},"hydra-node")," processes."),(0,n.kt)("p",null,"Each head, whether blue or green, progresses independently and requires the endorsement of all respective ",(0,n.kt)("em",{parentName:"p"},"Hydra parties")," within each head. For instance, the green head requires two signatures, while the blue head requires four."))}h.isMDXComponent=!0},62914:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/basic-hydra-head-31e4fded6123899b955e2ec45ad63e78.jpg"}}]);