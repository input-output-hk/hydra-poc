"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[7162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),h=r,m=c["".concat(d,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},99390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},i="Getting started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"To get started quickly, we'll walk you through the standard demo setup, which includes:",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/head-protocol/docs/getting-started",draft:!1,editUrl:"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/getting-started.md",tags:[],version:"current",frontMatter:{},sidebar:"userDocumentation",previous:{title:"Known issues and limitations",permalink:"/head-protocol/docs/known-issues"},next:{title:"Open a head on testnet",permalink:"/head-protocol/docs/tutorial/"}},d={},s=[{value:"Preparation",id:"preparation",level:2},{value:"Set up the devnet",id:"set-up-the-devnet",level:2},{value:"Start Hydra nodes",id:"start-hydra-nodes",level:2},{value:"Use the head",id:"use-the-head",level:2}],p={toc:s},c="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,"To get started quickly, we'll walk you through the standard demo setup, which includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A cluster of three ",(0,r.kt)("inlineCode",{parentName:"li"},"hydra-nodes"),", each directly connected to the others and configured with one of three Hydra credentials: ",(0,r.kt)("inlineCode",{parentName:"li"},"Alice"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Bob"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"Carol")),(0,r.kt)("li",{parentName:"ul"},"A single ",(0,r.kt)("inlineCode",{parentName:"li"},"cardano-node")," producing blocks used as a (very fast) local ",(0,r.kt)("inlineCode",{parentName:"li"},"devnet")),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"hydra-tui")," example for clients to interact with the individual ",(0,r.kt)("inlineCode",{parentName:"li"},"hydra-node"),".")),(0,r.kt)("p",null,"This tutorial uses ",(0,r.kt)("a",{parentName:"p",href:"https://www.docker.com/get-started"},"Docker")," to install the nodes, so ensure Docker is installed. If you want to explore alternative ways of running the tools, see the ",(0,r.kt)("a",{parentName:"p",href:"/head-protocol/docs/getting-started-without-docker"},"variant tutorial")," or the ",(0,r.kt)("a",{parentName:"p",href:"/head-protocol/docs/tutorial/"},"testnet tutorial"),", which uses pre-built binaries. The documentation pages on ",(0,r.kt)("a",{parentName:"p",href:"./installation"},"installation")," and ",(0,r.kt)("a",{parentName:"p",href:"./configuration"},"configuration")," provide more details."),(0,r.kt)("p",null,"Additionally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui")," uses the HTTP/WebSocket API provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-node")," behind the scenes. The ",(0,r.kt)("a",{parentName:"p",href:"/head-protocol/docs/tutorial/"},"testnet tutorial")," will show how to use this API using low-level commands, or you can see the ",(0,r.kt)("a",{parentName:"p",href:"https://hydra.family/head-protocol/unstable/api-reference"},"API reference")," for more details."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Video demonstration (a bit dated)"),(0,r.kt)("iframe",{style:{width:"100%",height:"480px"},src:"https://www.youtube.com/embed/dJk5_kB3BM4",title:"Hydra Head Demo",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"})),(0,r.kt)("admonition",{title:"OS Compatibility",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"These instructions have been tested only on Linux environments (Ubuntu, NixOS). If you're on Windows or Mac OS X, you might need to adapt to use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/storage/volumes/"},"Volumes"),".")),(0,r.kt)("h2",{id:"preparation"},"Preparation"),(0,r.kt)("p",null,"All commands below are written as if executed from the ",(0,r.kt)("inlineCode",{parentName:"p"},"demo")," folder in the project repository. Ensure you clone the repository, switch into the ",(0,r.kt)("inlineCode",{parentName:"p"},"demo")," folder, and pull the latest Docker images:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:cardano-scaling/hydra.git\ncd hydra/demo\ndocker compose pull\n")),(0,r.kt)("admonition",{title:"Shortcut",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For convenience, we provide a script ",(0,r.kt)("inlineCode",{parentName:"p"},"./run-docker.sh"),", which combines all the following steps. It also performs a few sanity checks to prevent potential issues.")),(0,r.kt)("h2",{id:"set-up-the-devnet"},"Set up the devnet"),(0,r.kt)("p",null,"Next, prepare the devnet configuration to bootstrap a local Cardano blockchain.\n",(0,r.kt)("strong",{parentName:"p"},"Note")," that we use a simplified variant of Cardano that does not require any stake pools."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./prepare-devnet.sh\n")),(0,r.kt)("p",null,"Bring the Cardano node up with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker compose up -d cardano-node\n")),(0,r.kt)("p",null,"Verify that the devnet is up-and-running by checking the logs with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker compose logs cardano-node -f\n")),(0,r.kt)("p",null,"You should see traces containing ",(0,r.kt)("inlineCode",{parentName:"p"},"TraceAdoptedBlock"),", which means that the devnet is producing blocks .. nice!"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Do not wait too long between these two commands. If you get ",(0,r.kt)("inlineCode",{parentName:"p"},"TraceNoLedgerView")," errors from the Cardano node, the genesis start time is too far in the past, and you need to update them by running ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare-devnet.sh")," again.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can use ",(0,r.kt)("a",{parentName:"p",href:"https://jqlang.github.io/jq/"},"jq")," to follow the logs and see the node update kinds with the\nfollowing command:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"docker compose logs -f --no-log-prefix cardano-node | jq -Rr 'fromjson? | .data.val.kind'\n"))),(0,r.kt)("p",null,"Next, we need to give Alice, Bob, and Carol some UTXOs for committing and ada for paying fees. To do this, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"seed-devnet.sh")," script, which uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli")," within the already running ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-node")," container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./seed-devnet.sh\n")),(0,r.kt)("h2",{id:"start-hydra-nodes"},"Start Hydra nodes"),(0,r.kt)("p",null,"Finally, now that the on-chain preparations are done, we can bring the Hydra network (all three nodes for Alice, Bob, and Carol) up by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker compose up -d hydra-node-{1,2,3}\n")),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"compose"),", you can start the demo Terminal-based User Interface (",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui"),") to interact with Hydra nodes. There are three preconfigured TUI services in the ",(0,r.kt)("inlineCode",{parentName:"p"},"compose")," definition: ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui-1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui-2"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui-3"),". To connect to the first Hydra node in a terminal, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker compose run hydra-tui-1\n")),(0,r.kt)("p",null,"This will start a full-blown terminal interface loaded with signing keys corresponding to the first Hydra node. In other terminals, you can start other nodes in a similar fashion targeting ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui-2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui-3")," services."),(0,r.kt)("h2",{id:"use-the-head"},"Use the head"),(0,r.kt)("p",null,"Using the terminal interface of any node, you can now ",(0,r.kt)("inlineCode",{parentName:"p"},"[i]nit")," the Hydra head and ",(0,r.kt)("inlineCode",{parentName:"p"},"[c]ommit")," pre-distributed funds to it. Note that these steps are near-instant as the devnet is producing blocks much faster than a public testnet or the mainnet. After committing from all nodes, the head will automatically open, and you can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra-tui")," or the API to create new transactions and submit them to the Hydra head."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(38520).Z,width:"1869",height:"487"})))}u.isMDXComponent=!0},38520:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/open-head-112e4af7cb464a179c7514412a8a9e38.png"}}]);