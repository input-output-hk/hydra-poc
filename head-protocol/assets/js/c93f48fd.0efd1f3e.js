"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[283],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,y=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(y,o(o({ref:t},d),{},{components:n})):a.createElement(y,o({ref:t},d))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84700:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_label:"Auctions-as-a-service: single",sidebar_position:4},o="Always-on delegated auction service (single head)",s={unversionedId:"auctions/always-on-service-single/index",id:"auctions/always-on-service-single/index",title:"Always-on delegated auction service (single head)",description:"The always-on delegated auction is a persistent service for DApps that runs multiple auctions on layer 2, using a single Hydra head. This enables an as-a-service business model.",source:"@site/use-cases/auctions/always-on-service-single/index.md",sourceDirName:"auctions/always-on-service-single",slug:"/auctions/always-on-service-single/",permalink:"/head-protocol/use-cases/auctions/always-on-service-single/",draft:!1,editUrl:"https://github.com/cardano-scaling/hydra/tree/master/docs/use-cases/auctions/always-on-service-single/index.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Auctions-as-a-service: single",sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"SDK for delegated voucher auctions",permalink:"/head-protocol/use-cases/auctions/delegated-voucher-sdk/"},next:{title:"Auctions-as-a-service: multi",permalink:"/head-protocol/use-cases/auctions/always-on-service-multi/"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Features and scope",id:"features-and-scope",level:2},{value:"Remaining limitations",id:"remaining-limitations",level:2},{value:"Prerequisites from Hydra technical roadmap",id:"prerequisites-from-hydra-technical-roadmap",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"always-on-delegated-auction-service-single-head"},"Always-on delegated auction service (single head)"),(0,i.kt)("p",null,"The always-on delegated auction is a persistent service for DApps that runs multiple auctions on layer 2, using a single Hydra head. This enables an as-a-service business model."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Looking beyond a single application, our goal is to foster the development of an ecosystem of Hydra-enabled DApps on Cardano. To achieve this, we need to establish a viable business model for delegates that provides Hydra heads with the ability to host DApp processes as a service. The delegated voucher auction can be adapted to this model by transitioning from its previous single-use Hydra head to a persistent Hydra head that can host multiple auctions continuously without closing."),(0,i.kt)("h2",{id:"features-and-scope"},"Features and scope"),(0,i.kt)("p",null,"To be determined."),(0,i.kt)("h2",{id:"remaining-limitations"},"Remaining limitations"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Delegates have the ability to censor bidders from submitting bids to the auction."),(0,i.kt)("li",{parentName:"ol"},"Delegates on layer 2 are tasked with ensuring that the standing bid of an auction can only be replaced by a new bid that exceeds it by the minimum increment specified in the auction terms. However, bidders receive multi-signed proof for every confirmed bid, providing incontrovertible evidence against delegates in cases of any foul play.")),(0,i.kt)("h2",{id:"prerequisites-from-hydra-technical-roadmap"},"Prerequisites from Hydra technical roadmap"),(0,i.kt)("p",null,"To be determined."))}p.isMDXComponent=!0}}]);